diff -urN coreboot-orig/src/include/cpu/x86/smm.h coreboot/src/include/cpu/x86/smm.h
--- coreboot-orig/src/include/cpu/x86/smm.h	2019-09-13 16:57:37.077828278 +0800
+++ coreboot/src/include/cpu/x86/smm.h	2019-09-15 18:28:55.302593815 +0800
@@ -39,6 +39,7 @@
 #define APM_CNT_LEGACY		0xcc
 #define APM_CNT_SMMSTORE	0xed
 #define APM_CNT_ELOG_GSMI	0xef
+#define APM_CNT_VAULT		0xfa
 #define APM_STS		0xb3
 
 void io_trap_handler(int smif);
diff -urN coreboot-orig/src/soc/intel/common/block/smm/smihandler.c coreboot/src/soc/intel/common/block/smm/smihandler.c
--- coreboot-orig/src/soc/intel/common/block/smm/smihandler.c	2019-09-13 16:57:37.465830799 +0800
+++ coreboot/src/soc/intel/common/block/smm/smihandler.c	2019-09-16 00:23:23.369752139 +0800
@@ -20,6 +20,7 @@
 #include <console/console.h>
 #include <cpu/x86/cache.h>
 #include <cpu/x86/smm.h>
+#include <cpu/x86/msr.h>
 #include <cpu/intel/em64t100_save_state.h>
 #include <cpu/intel/em64t101_save_state.h>
 #include <delay.h>
@@ -29,6 +30,7 @@
 #include <intelblocks/pmclib.h>
 #include <intelblocks/smihandler.h>
 #include <intelblocks/uart.h>
+#include <intelblocks/pcr.h>
 #include <smmstore.h>
 #include <soc/nvs.h>
 #include <soc/pci_devs.h>
@@ -36,10 +38,14 @@
 #include <soc/gpio.h>
 #include <soc/iomap.h>
 #include <soc/smbus.h>
+#include <soc/msr.h>
+#include <soc/pcr_ids.h>
 #include <spi-generic.h>
 #include <stdint.h>
 #include <stdlib.h>
 
+void vault_lock(void);
+
 /* GNVS needs to be set by coreboot initiating a software SMI. */
 static struct global_nvs_t *gnvs;
 
@@ -335,6 +341,74 @@
 	smihandler_soc_at_finalize();
 }
 
+static void msr_set_bit(unsigned int reg, unsigned int bit)
+{
+	msr_t msr = rdmsr(reg);
+
+	if (bit < 32) {
+		if (msr.lo & (1 << bit))
+			return;
+		msr.lo |= 1 << bit;
+	} else {
+		if (msr.hi & (1 << (bit - 32)))
+			return;
+		msr.hi |= 1 << (bit - 32);
+	}
+	
+	wrmsr(reg, msr);
+}
+
+void vault_lock()
+{
+	// bugy impl?
+//      fast_spi_enable_wp();
+//      fast_spi_set_lock_enable();
+
+#if defined(__SIMPLE_DEVICE__)
+	pci_devfn_t dev = PCH_DEV_SPI;
+#else
+	struct device *dev = PCH_DEV_SPI;
+#endif
+	uint8_t bios_cntl;
+	uint32_t bios_fracc;
+	uint32_t hsfsts_cntl;
+
+	// Precondition to meet FRACC tuning: HSFSTS_CNTL.WET
+	hsfsts_cntl = pci_read_config32(dev, 0x4);
+	hsfsts_cntl |= 1 << 21  ;
+	pci_write_config32(dev, 0x4, hsfsts_cntl);
+
+	// BIOS_FRACC: 0x50
+	bios_fracc = pci_read_config32(dev, 0x50);
+	bios_fracc = 0;
+	//bios_fracc = 0x4acf0000;
+	// ((0x4a << 8) || 0xcf) << 16;
+	pci_write_config32(dev, 0x50, bios_fracc);
+
+	// BIOS_CNTL: 0xdc
+	bios_cntl = pci_read_config8(dev, 0xdc);
+	bios_cntl &= ~(1 << 0); // BIOSWE
+	bios_cntl |= (1 << 1); // BLE
+	pci_write_config8(dev, 0xdc, bios_cntl);
+
+
+	// MEMLOCK
+	msr_set_bit(MSR_LT_LOCK_MEMORY, 0);
+
+	// RTCLOCK
+	pcr_rmw32(PID_RTC, 0x3400, ~(1 << 3), (1 << 3)); // LL: 128-byte
+	pcr_rmw32(PID_RTC, 0x3400, ~(1 << 4), (1 << 4)); // UL: 128-byte
+
+	hsfsts_cntl = pci_read_config32(dev, 0x4);
+	hsfsts_cntl &= ~(1 << 21);
+	hsfsts_cntl |= 1 << 12;
+	pci_write_config32(dev, 0x4, hsfsts_cntl);
+
+	// FLOCKDN
+	fast_spi_pr_dlock();
+	fast_spi_lock_bar();
+}
+
 void smihandler_southbridge_apmc(
 	const struct smm_save_state_ops *save_state_ops)
 {
@@ -396,6 +470,9 @@
 	case APM_CNT_FINALIZE:
 		finalize();
 		break;
+	case APM_CNT_VAULT:
+		vault_lock();
+		break;
 	}
 
 	mainboard_smi_apmc(reg8);
diff -urN coreboot-orig/src/soc/intel/common/pch/lockdown/lockdown.c coreboot/src/soc/intel/common/pch/lockdown/lockdown.c
--- coreboot-orig/src/soc/intel/common/pch/lockdown/lockdown.c	2019-09-13 16:57:37.469830826 +0800
+++ coreboot/src/soc/intel/common/pch/lockdown/lockdown.c	2019-09-16 00:24:20.881441579 +0800
@@ -64,10 +64,10 @@
 	fast_spi_set_opcode_menu();
 
 	/* Discrete Lock Flash PR registers */
-	fast_spi_pr_dlock();
+	//fast_spi_pr_dlock();
 
 	/* Lock FAST_SPIBAR */
-	fast_spi_lock_bar();
+	//fast_spi_lock_bar();
 
 	/* Set Bios Interface Lock, Bios Lock */
 	if (chipset_lockdown == CHIPSET_LOCKDOWN_COREBOOT) {
